import { useContext, useState, useEffect } from 'react';
import UserContext from '../../../components/UserContext';
import { useRouter } from 'next/router';
import { useSupabaseClient } from '@supabase/auth-helpers-react';
import md from 'markdown-it';
import Layout from '../../../components/Layout.js';

export default function Contacts({ id }) {
  const [contact, setContact] = useState(null);
  const [adminStatus, setAdminStatus] = useState(null);
  const { user } = useContext(UserContext);
  const supabase = useSupabaseClient();
  const router = useRouter();

  useEffect(() => {
    const fetchContactAndStatus = async () => {
      try {
        let { data, error, status } = await supabase
          .from('contacts')
          .select(`firstname, lastname, email, message`)
          .eq('id', id)
          .single();
        setContact(data);

        if (user && user.email) {
          const { data: adminData, error: adminError } = await supabase
            .from('profiles')
            .select('admin')
            .eq('email', user.email);

          if (adminError) {
            console.error(adminError);
            return;
          }

          setAdminStatus(adminData[0]?.admin);
        }
      } catch (error) {
        console.error('Error fetching contact or admin status:', error.message);
      }
    };

    fetchContactAndStatus();
  }, [id, supabase, user, router]);

  useEffect(() => {
    if (adminStatus === false) {
      router.push('/');
    }
  }, [adminStatus, router]);

  return (
    <Layout title="Admin Contacts" description="Generated by create next app">
      {contact && (
        <div className="bg-white">
          <h2 className="text-3xl font-extrabold mb-4 text-green-1 text-center">Message from:</h2>
          <br /> <br />
          <div className="overflow-hidden divide-y divide-green-2 shadow ring-1 ring-black ring-opacity-5 md:rounded-lg">
            <div className="bg-beige-1">
              <dl className="grid grid-cols-[auto_1fr] px-3 py-4 [&_dt]:italic [&_dt]:text-camel [&_dt]:pr-3">
                <dt>Name</dt>
                <dd>
                  {contact.lastname} {contact.firstname}
                </dd>
                <dt>Email</dt>
                <dd>{contact.email}</dd>
              </dl>
            </div>
            <div className="px-3 py-10 bg-white">
              <div dangerouslySetInnerHTML={{ __html: md().render(contact.message) }} />
            </div>
          </div>
        </div>
      )}
    </Layout>
  );
}

export async function getServerSideProps(context) {
  return {
    props: {
      id: context.params.id,
    },
  };
}
