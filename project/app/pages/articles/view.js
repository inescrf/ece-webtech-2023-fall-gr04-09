import { useContext, useState, useEffect } from 'react'
import { useSupabaseClient } from '@supabase/auth-helpers-react'
import UserContext from '../../components/UserContext.js'
import Link from 'next/link'
import Layout from '../../components/Layout.js'


export default function Articles() {
  const [articles, setArticles] = useState([]);
  const supabase = useSupabaseClient();
  const { user } = useContext(UserContext);
  const [deleteConfirmation, setDeleteConfirmation] = useState(null);

  const handleDeleteClick = async (article) => {
    setDeleteConfirmation(article);
  };

  const handleDeleteConfirmation = async (confirmation) => {
    if (confirmation) {
      // delete the article
      const { data, error } = await supabase
        .from('articles')
        .delete()
        .eq('strMeal', confirmation.strMeal);

      if (error) {
        console.error('Error deleting article:', error.message);
        return;
      }
      //delete all the comments made on the article
      const { commentData, commentError } = await supabase
        .from('comments')
        .delete()
        .eq('idMeal', confirmation.idMeal);

      if (commentError) {
        console.error('Error deleting article:', commentError.message);
        return;
      }

      // update articles list after delete an article
      const updatedArticles = articles.filter((article) => article.strMeal !== confirmation.strMeal);
      setArticles(updatedArticles);
    }

    // reinitialisation of the variable of confirmation after the confirmation or the cancelation
    setDeleteConfirmation(null);
  };

  useEffect(() => {
    //load article
    (async () => {
      if (user) {
        let { data, error } = await supabase
          .from('articles')
          .select(`*`)
          .eq('emailCreator', user.email);

        setArticles(data);
        console.log('Supabase query result:', { data, error });
      }
    })();
  }, [user]);

  return (
    <Layout
      title="User Articles"
      description="Generated by create next app"
    >
      <div className="flex justify-between items-center mb-4">
        <h1 className="wt-title">My Articles</h1>
        <Link href="/profile">
          Back to user
        </Link>
      </div>
      <div className="not-prose -my-2 -mx-4 overflow-x-auto sm:-mx-6 lg:-mx-8">
        <div className="inline-block min-w-full py-2 align-middle md:px-6 lg:px-8">
          <div className="overflow-hidden shadow ring-1 ring-black ring-opacity-5 md:rounded-lg">
            <table className="min-w-full divide-y divide-slate-300">
              <thead className="bg-slate-50">
                <tr>
                  <th scope="col" className="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-slate-900 sm:pl-6">
                    Name
                  </th>
                  <th scope="col" className="px-3 py-3.5 text-left text-sm font-semibold text-slate-900">
                    Category
                  </th>
                  <th scope="col" className="px-3 py-3.5 text-left text-sm font-semibold text-slate-900">
                    Area
                  </th>
                  <th scope="col" className="px-3 py-3.5 text-left text-sm font-semibold text-slate-900">

                  </th>
                  <th scope="col" className="px-3 py-3.5 text-left text-sm font-semibold text-slate-900">

                  </th>
                </tr>
              </thead>
              <tbody className="divide-y divide-slate-200 bg-white">
                {articles.map((article) => (
                  <tr key={article.strMeal}>
                    <td className="whitespace-nowrap px-3 py-4 text-sm text-slate-500">{article.strMeal}</td>
                    <td className="whitespace-nowrap px-3 py-4 text-sm text-slate-500">{article.strCategory}</td>
                    <td className="whitespace-nowrap px-3 py-4 text-sm text-slate-500">{article.strArea}</td>
                    <td>
                      <Link
                        href={`/articles/edit?strMeal=${encodeURIComponent(article.strMeal)}`}
                      >
                        Modify
                      </Link>
                    </td>
                    <td>
                      <button
                        onClick={() => handleDeleteClick(article)}
                        className="text-red-500 hover:text-red-700 cursor-pointer"
                      >
                        Delete
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </div>
      {deleteConfirmation && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
          <div className="bg-white p-4 rounded shadow-lg">
            <p>Are you sure you want to delete the article : {deleteConfirmation.strMeal} and all the comments ?</p>
            <div className="flex justify-end mt-4">
              <button
                onClick={() => handleDeleteConfirmation(deleteConfirmation)}
                className="bg-red-500 text-white px-4 py-2 mr-2 rounded"
              >
                Yes
              </button>
              <button
                onClick={() => handleDeleteConfirmation(null)}
                className="bg-gray-200 text-gray-700 px-4 py-2 rounded"
              >
                No
              </button>
            </div>
          </div>
        </div>
      )}
    </Layout>
  );
}
